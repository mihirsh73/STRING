class Solution {
public:
    // bool palindrome(string s, int i, int j)
    // {
    //     int l=i;
    //     int r=j;
    //     while(l<=r)
    //     {                                        TC O(N^3) SC O(1)
    //         if(s[l]!=s[r])
    //         {
    //             return false;
    //         }
    //         else{
    //             l++;
    //             r--;
    //         }
    //     }
    //     return true;
    // }
    int countSubstrings(string s) {
        // int count=0;
        // for(int i=0; i<s.size(); i++)
        // {
        //     for(int j=i; j<s.size(); j++)
        //     {
        //         if(palindrome(s,i,j)==true)
        //         {
        //             count++;
        //         }
        //     }
        // }
        // return count;
        int count=0;
        for(int i=0; i<s.size(); i++)
        {
            int start=i;   // odd length strings                              TC O(N^2) SC O(1)
            
            int end=i;
            while(start>=0 && end<s.size() && s[start--]==s[end++]) count++;
            start=i-1;  // even length strings
            end=i;
            while(start>=0 && end<s.size() && s[start--]==s[end++]) count++;
        }
        return count;
        
    }
};
