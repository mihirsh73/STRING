class Solution {
public:
    int strStr(string haystack, string needle) {
        if(haystack.size()==0 && needle.size()==0)
        {
            return 0;
        }
        
        if(haystack.size()==0 && needle.size()!=0)
        {
            return -1;
        }
        if(haystack.size()!=0 && needle.size()==0)
        {
            return 0;
        }
        int lps[needle.size()];
        int len=0;
        lps[0]=0;
        int i=1;
        while(i<needle.size())
        {
            if(needle[i]==needle[len])
            {
                len++;
                lps[i]=len;
                i++;
            }
            else{
                if(len!=0){
                len = lps[len-1];
                }
                else{
                    len=0;
                    lps[i]=len;
                    i++;
                }
            }
        }
     i = 0; // index for txt[]
    int j = 0; // index for pat[]
    while (i < haystack.size()) {
        if (needle[j] == haystack[i]) {
            j++;
            i++;
        }
  
        if (j == needle.size()) {
            
            return i-j;
        }
  
        // mismatch after j matches
        else if (i < haystack.size() && needle[j] != haystack[i]) {
            // Do not match lps[0..lps[j-1]] characters,
            // they will match anyway
            if (j != 0)
                j = lps[j - 1];
            else
                i = i + 1;
        }
       
        
    }
        return -1;
    }
};
// TC O(N) SC O(N)
